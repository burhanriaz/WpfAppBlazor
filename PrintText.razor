@using System.Windows.Documents
@using System.Windows
<h3>PrintText</h3>
<Button Width="200" @onclick="PrintPopUp">Print</Button>

@*<button class="btn btn-primary" @onclick="PrintPopUp">PrintPopUp</button>*@

@if (ShowPopup)
{
    
    <form>
         <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Print files </h3>
                    <!-- Button to close the popup -->
                <button type="button" class="close" @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
        <label>Choose a page Size1:</label>
        <select @onchange="DoStuff">  @*//pre-3.0 versions: onchange=@DoStuff*@
            @foreach (var template in templates)
            {
                <option value=@template>@template</option>
            }
        </select>
          <button class="btn btn-primary" @onclick="PrintDoc"> PrintDoc</button>
                </div>
            </div>
        </div>
    
    </form>
}@*
@if (ShowPopup)
{
    <!-- This is the popup to create or edit a forecast -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Print files </h3>
                    <!-- Button to close the popup -->
                <button type="button" class="close" @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current forecast -->

            <div class="modal-body">
                    <input class="form-control" type="checkbox" placeholder="Page Size" />

                    <br />
                    <label>Choose a page Size:</label>
                    <select name="PageSize" id="PageSize">
                        <option  value="A4">A4</option>
                        <option value="Letter">Letter</option>
                    </select>
                    <!-- Button to save the forecast -->
                <button class="btn btn-primary" @onclick="InvokePrint"> InvokePrint </button>
                </div>
            </div>
        </div>
    </div>
}*@

@code {
    ////static string PageSize = null; 
    //List<string> templates = new List<string>() { "A4", "Letter", "Legel"};
    //string SelectedString = "A4";

    //void DoStuff(ChangeEventArgs e)
    //{
    //    var SelectedString="";
    //    SelectedString = e.Value.ToString();
    //   // PageSize= e.Value.ToString();
    //}

    @functions {
        //use @code in razor components.
        List<string> templates = new List<string>() { "A4", "Letter", "Legel"};
        string SelectedString = "A4";

        void DoStuff(ChangeEventArgs e)
        {
            SelectedString = e.Value.ToString();
            // Console.WriteLine("It is definitely: " + SelectedString);
        }
}

    private void PrintDoc()
        {

   var  templates =  "A4 Letter  Legel";
    PrintDialog printDialog = new PrintDialog();
    FlowDocument flowDocument = new FlowDocument();
    flowDocument.PagePadding = new Thickness(50);

     PaperSize psize = new PaperSize();
    if (SelectedString == "A4")
        psize.RawKind = (int)PaperKind.A4;
    else if (SelectedString == "Letter")
        psize.RawKind = (int)PaperKind.Letter;
    else
        psize.RawKind = (int)PaperKind.Legal;
     
    
    flowDocument.Blocks.Add(new Paragraph(new Run(templates)));
    printDialog.PrintDocument((((IDocumentPaginatorSource)flowDocument).DocumentPaginator), "Using Paginator");

    
    
    ///////////////////////////////////
    PrintDocument pd = new PrintDocument();
    PaperSize pSize = new PaperSize();
    if (SelectedString == "A4")
        pSize.RawKind = (int)PaperKind.A4;
    else if (SelectedString == "Letter")
        pSize.RawKind = (int)PaperKind.Letter;
    else
        pSize.RawKind = (int)PaperKind.Legal;

    pd.DefaultPageSettings.PaperSize = pSize;
    //pd.DefaultPageSettings.Landscape = true;
    try
    {
        pd.Print();

    }
    catch (Exception e)
    {
        throw e;
    }
        }

    bool ShowPopup = false;
    void PrintPopUp()
    {
    // Open the Popup
    ShowPopup = true;
    }


    void ClosePopup()
    { ShowPopup = false; }


        private void InvokePrint()
        {
    // var PageSize = pg;
    // Create the print dialog object and set options
    PrintDialog pDialog = new PrintDialog();
    pDialog.PageRangeSelection = PageRangeSelection.AllPages;
    pDialog.UserPageRangeEnabled = true;

    //// Display the dialog. This returns true if the user presses the Print button.
    //Nullable<Boolean> print = pDialog.ShowDialog();
    //if (print == true)
    //{}
    XpsDocument xpsDocument = new XpsDocument("D:\\JWT_Task.doxc", FileAccess.ReadWrite);
    FixedDocumentSequence fixedDocSeq = xpsDocument.GetFixedDocumentSequence();
    pDialog.PrintDocument(fixedDocSeq.DocumentPaginator, "Test print job");

        }
}
